import asyncio
import uuid
from utils.decorators import admin_only
from datetime import datetime
from zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from data.database import insert_auction, delete_auction
from data.models import Auction
from data.storage import auction_data, archived_auctions, scheduled_tasks
from utils.helpers import title_parser_new_auc, check_overlap
from services.auction_lifecycle import schedule_auction_start, schedule_auction_end

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_auc, –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
@admin_only
async def new_auc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    chat_id = update.effective_chat.id
    try:
        if len(context.args) < 6:
            await update.message.reply_text(
                 "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π:\n\n"
                 "/new_auc –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞, –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î', –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ '–ß–ß:–ú–ú', –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ '–ß–ß:–ú–ú', –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ - –ß–ò–°–õ–û, –®–∞–≥ —Å—Ç–∞–≤–∫–∏ - –ß–ò–°–õ–û",
                )
            return
        
        # –ü–∞—Ä—Å–µ—Ä –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        parsed = title_parser_new_auc(context.args)
        if not parsed:
        # if parsed is None:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n\n"
                "–§–æ—Ä–º–∞—Ç: /new_auc –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤) –î–∞—Ç–∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –°—Ç–∞—Ä—Ç –®–∞–≥",
            )
            return

        title, date_str, start_time_str, end_time_str, start_bid_str, step_str = parsed

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ datetime
        try:
            moscow_tz = ZoneInfo("Europe/Moscow")
            start_dt = datetime.strptime(f"{date_str} {start_time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=moscow_tz)
            end_dt = datetime.strptime(f"{date_str} {end_time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=moscow_tz)
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 2025-04-21 18:00 18:10")
            return
        
       #–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–Ω—ã—Ö –≤ —á–∏—Å–ª–∞ - –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏ —à–∞–≥
        try:
            start_bid = int(start_bid_str)
            step = int(step_str)
        except:
            await update.message.reply_text("‚ùå –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –∏ —à–∞–≥ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
            return

        #–ü—Ä–æ–≤–µ—Ä–∫–∞ - –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞—É–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞
        if end_dt <= start_dt:
            await update.message.reply_text("‚õî –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ - –Ω–∞—á–∞–ª–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        now = datetime.now(ZoneInfo("Europe/Moscow"))
        if start_dt <= now:
            await update.message.reply_text(
                "‚õî –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        overlap_found, conflicting_auc = check_overlap(chat_id, start_dt, end_dt)
        if overlap_found:
            await update.message.reply_text(
                f"‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω!\n\n"
                f"‚è∞ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º –∞—É–∫—Ü–∏–æ–Ω–æ–º: ¬´{conflicting_auc.title}¬ª\n"
                f"üóìÔ∏è {conflicting_auc.start_dt.strftime('%d.%m.%Y %H:%M')} - {conflicting_auc.end_dt.strftime('%H:%M')}",
            )
            return

        auction = Auction(
            id=str(uuid.uuid4()),
            chat_id=chat_id,
            title=title,
            start_dt=start_dt,
            end_dt=end_dt,
            start_bid=start_bid,
            step=step,
            is_active=True,
            is_running=False,
            is_finish=False,
            last_valid_bid=start_bid,
            invalid_count=0,
            can_count_invalid=True,
            is_paused=False,
            all_bids=[],
            all_bets_placed=[]
        )
        if chat_id not in auction_data:
            auction_data[chat_id]=[]

        auction_data[chat_id].append(auction)
        insert_auction(auction)
        
        start_task = asyncio.create_task(schedule_auction_start(context, chat_id, auction)) 
        end_task = asyncio.create_task(schedule_auction_end(context, chat_id, auction))  

        scheduled_tasks.setdefault(chat_id,{})[auction.id] = { 
            "start_task": start_task,           
            "end_task": end_task,               
        }

        await update.message.reply_text(
            f"üü¢ –ê—É–∫—Ü–∏–æ–Ω –Ω–∞ {title}  (–ø–æ –ú–°–ö)\n\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.strptime(date_str, "%Y-%m-%d").strftime("%d/%m/%Y")}\n\n"
            f"üïò –ù–∞—á–∞–ª–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ –∫–æ–Ω–µ—Ü –∞—É–∫—Ü–∏–æ–Ω–∞: {start_time_str} - {end_time_str} (–ø–æ –ú–°–ö)\n\n"
            f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {start_bid} —Ä—É–±\n\n"
            f"üîÅ –®–∞–≥ —Å—Ç–∞–≤–∫–∏: {step} —Ä—É–±",
            )
        
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    except Exception as e: 
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")

#–ü—Ä–æ–≤–µ—Ä–∫–∞ - –∫–∞–∫–∏–µ –∞—É–∫—Ü–∏–æ–Ω—ã –µ—Å—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ
@admin_only
async def show_aucs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –±—É–¥—É—â–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    print("üì• show_aucs –≤—ã–∑–≤–∞–Ω")  #–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    #–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –±—É–¥—É—â–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    chat_id = update.effective_chat.id
    now_time = datetime.now(ZoneInfo("Europe/Moscow"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∞—É–∫—Ü–∏–æ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    if chat_id not in auction_data or not auction_data[chat_id]:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ, –ø–µ—Ä–µ–º–µ—â–∞—è –∏—Ö –≤ –∞—Ä—Ö–∏
    future_aucs = []

    for auc in auction_data[chat_id]:
        if auc.end_dt < now_time:
            archived_auctions.setdefault(chat_id, []).append(auc)
        else:
            future_aucs.append(auc)
    auction_data[chat_id]= future_aucs

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –í–°–ï –∞—É–∫—Ü–∏–æ–Ω—ã ‚Äî –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ, –∏ –±—É–¥—É—â–∏–µ, –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
    for i, auc in enumerate(auction_data[chat_id], start=1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å ‚Äî –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if auc.is_active else "‚ùå –ó–∞–∫—Ä—ã—Ç/–û—Ç–º–µ–Ω—ë–Ω"

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"*üîπ –ê—É–∫—Ü–∏–æ–Ω {i} ‚Äî {status}*\n"
            f"üì¶ –õ–æ—Ç: {auc.title}\n"
            f"üìÖ –î–∞—Ç–∞: {auc.start_dt.strftime('%d-%m-%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞: {auc.start_dt.strftime('%H:%M')} - {auc.end_dt.strftime('%H:%M')}\n"
            f"üí∞ –°—Ç–∞—Ä—Ç: {auc.start_bid} —Ä—É–± | –®–∞–≥: {auc.step} —Ä—É–±"
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ –µ–≥–æ ID
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_auc_{auc.id}")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await update.message.reply_text(text,reply_markup=keyboard)  

@admin_only
async def delete_auc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
    chat_id = update.effective_chat.id

    if chat_id not in auction_data or not auction_data[chat_id]:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "`/delete_auc 2`", 
            )
        return
    
    index = int(context.args[0]) - 1

    if index < 0 or index >= len(auction_data[chat_id]):
        await update.message.reply_text("‚ùå –ê—É–∫—Ü–∏–æ–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    auc = auction_data[chat_id].pop(index)

    if chat_id in scheduled_tasks and auc.id in scheduled_tasks[chat_id]:
        for task in scheduled_tasks[chat_id][auc.id].values():
            if not task.done():
                task.cancel()
        del scheduled_tasks[chat_id][auc.id]

    delete_auction(auc.id)
    await update.message.reply_text(f"üóë –£–¥–∞–ª—ë–Ω –∞—É–∫—Ü–∏–æ–Ω ¬´{auc.title}¬ª.")
    