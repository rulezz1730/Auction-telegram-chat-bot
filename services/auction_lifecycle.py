import asyncio
import random
from datetime import datetime
from data.storage import auction_data
from data.models import Auction
from utils.helpers import escape_markdown
from data.database import update_auction, get_all_auctions
from zoneinfo import ZoneInfo



START_PHRASES = ["–ü–û–ï–•–ê–õ–ò!", "–ù–ê–ß–ê–õ–ò!", "–°–¢–ê–†–¢!", "–ü–û–ù–ï–°–õ–ê–°–¨!", "–ü–û–ì–ù–ê–õ–ò!"]
STOP_PHRASE = ("‚õîÔ∏è –°–¢–û–ü!\n\n –ê—É–∫—Ü–∏–æ–Ω - –ó–ê–í–ï–†–®–ï–ù.")

async def schedule_auction_start(context, chat_id: int, auction: Auction):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""

    print(f"‚ñ∂Ô∏è –ó–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {auction.title}")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º —Å—Ç–∞—Ä—Ç–∞
    now = datetime.now(tz=auction.start_dt.tzinfo)  # –≤—Å–µ–≥–¥–∞ –ú–°–ö!
    delay = (auction.start_dt - now).total_seconds()

    # –ñ–¥—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(max(0, delay))

    # –ó–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞
    await start_auction(context, chat_id, auction)


async def start_auction(context, chat_id: int, auction: Auction):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω ‚Äî –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"üéØ start_auction –∑–∞–ø—É—â–µ–Ω –¥–ª—è {auction.title}")

    #1. –ü—Ä–æ–≤–µ–∫–∞, –Ω–∞–ª–∏—á–∏—è —á–∞—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    if chat_id not in auction_data:
        return 
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—É–∫—Ü–∏–æ–Ω –ø–æ –µ–≥–æ ID
    existing_auction = next((a for a in auction_data[chat_id] if a.id == auction.id), None)

    if not existing_auction or not existing_auction.is_active:
        return
    
    existing_auction.is_running = True  #–°—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ—Ç
    existing_auction.is_paused = False
    existing_auction.invalid_count = 0 #–°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    existing_auction.all_bids = []

    phrase = random.choice(START_PHRASES)

    await context.bot.send_message(
        chat_id,
        f"üì¢ {phrase}\n\nüí∞ –ù–ê–ß–ê–õ–¨–ù–ê–Ø –°–¢–ê–í–ö–ê: {existing_auction.start_bid} –†–£–ë. \n\n"
        f"üëü  –®–ê–ì: {existing_auction.step}",
    )   


async def schedule_auction_end(context, chat_id: int, auction: Auction):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    now = datetime.now(tz=auction.end_dt.tzinfo)
    delay = (auction.end_dt - now).total_seconds()

    # –ñ–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
    await asyncio.sleep(max(0, delay))

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
    await stop_auction(context, chat_id, auction)


async def stop_auction(context, chat_id: int, auction: Auction):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω, –æ–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –ø–∏—à–µ—Ç, —á—Ç–æ —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ"""
    print(f'Stop auction')
   
    current_auction = next((a for a in auction_data.get(chat_id, []) if a.id == auction.id), None)
    if not current_auction:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞—É–∫—Ü–∏–æ–Ω –≤ –ø–∞–º—è—Ç–∏")
        return

    if not current_auction.is_active or current_auction.is_finish:
        print(f' –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ {current_auction.title} ‚Äî –æ–Ω —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω')
        return
    
    if current_auction.all_bids:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É (–æ–Ω–∞ –∂–µ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å)
        last_bid = current_auction.all_bids[-1]
        user = last_bid['user']
        amount = str(last_bid['bid'])
        # user, amount = auction["all_bids"][-1]

        user = escape_markdown(user)
        amount = escape_markdown(str(amount))

        final_msg = (
            f"{STOP_PHRASE}\n\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∞—É–∫—Ü–∏–æ–Ω–∞ *{current_auction.title}*: {user}\n\n"
            f"üí∏ –°—Ç–∞–≤–∫–∞: {amount} —Ä—É–±\n\n"
            f"üì© –ù–∞–ø–∏—à–∏ –Ω–∞–º @finka_nkvd_zakaz ‚Äî –æ—Ñ–æ—Ä–º–∏–º –ø–æ–±–µ–¥—É!"
        )

    else:
        final_msg = (
            f"{STOP_PHRASE}\n\n"
            f"–ê—É–∫—Ü–∏–æ–Ω *{current_auction.title}* –∑–∞–≤–µ—Ä—à—ë–Ω ‚ùå\n"
            f"–°—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ."
        )

    await context.bot.send_message(
        chat_id=chat_id,
        text=final_msg,
    )
        
    current_auction.is_running = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫
    current_auction.is_finish = True    # –°—Ç–∞–≤–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    current_auction.is_active = False

    update_auction(current_auction)

    asyncio.create_task(schedule_memory_cleanup(chat_id, current_auction.id))


async def schedule_memory_cleanup (chat_id: int, auction_id: str, delay: float = 360):
    #  """
    # –£–¥–∞–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –∏–∑ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ `delay` —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç)
    # """
    await asyncio.sleep(delay)

    if chat_id not in auction_data:
        return

    auctions = auction_data[chat_id]
    before = len(auctions)
    auction_data[chat_id] = [a for a in auctions if a.id != auction_id]
    after = len(auction_data[chat_id])

    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: —É–¥–∞–ª—ë–Ω –∞—É–∫—Ü–∏–æ–Ω {auction_id} –∏–∑ chat_id={chat_id} ({before} ‚Üí {after}. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∞—É–∫—Ü–∏–æ–Ω–∞ {auction_data[chat_id]})")


async def restore_scheduled_tasks(application):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –∏–∑ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    all_auctions = get_all_auctions()
    now = datetime.now(ZoneInfo("Europe/Moscow"))

    for auction in all_auctions:
        if auction.is_active and not auction.is_finish:
            # auction_data[auction.chat_id] = []
            auction_data.setdefault(auction.chat_id, [])

            if not any(a.id == auction.id for a in auction_data[auction.chat_id]):
                auction_data[auction.chat_id].append(auction)
            
            if auction.start_dt > now:
                print(f"‚è≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è: {auction.title}")
                asyncio.create_task(schedule_auction_start(application, auction.chat_id, auction))
            
            elif auction.start_dt <= now <= auction.end_dt:
                print(f"üî• –ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏: {auction.title} ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
                asyncio.create_task(schedule_auction_start(application, auction.chat_id, auction))

            if auction.end_dt > now:
                print(f"üìå –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è: {auction.title}")
                asyncio.create_task(schedule_auction_end(application, auction.chat_id, auction))
